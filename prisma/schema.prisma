generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            Int         @id @default(autoincrement())
  name          String
  email         String      @unique
  password      String
  role          Role        @default(ADMIN)
}

model Student {
  id            Int               @id @default(autoincrement())
  name          String
  email         String            @unique
  password      String            @default("hello@user")
  usn           String            @unique
  branchCode    String
  branch        Branch            @relation(fields: [branchCode], references: [code])
  semester      Int
  role          Role              @default(STUDENT)
  courses       CourseOfStudent[]
  teachers      StudentTeacher[]
}

model Course {
  id            Int         @id @default(autoincrement())
  title         String      @unique
  description   String?
  courseId      String      @unique
  students      CourseOfStudent[]
  teachers      CourseOfTeacher[]
}

model CourseOfStudent {
  student       Student     @relation(fields: [usn], references: [usn])
  usn           String
  course        Course      @relation(fields: [courseId], references: [courseId])
  courseId      String
  @@unique([usn, courseId])
}

model Teacher {
  id            Int                @id @default(autoincrement())
  name          String
  initial       String             @unique
  email         String             @unique
  password      String             @default("hello@user")
  role          Role               @default(TEACHER)
  branches      BranchTeacher[]
  courses       CourseOfTeacher[]
  students      StudentTeacher[]
}

model Branch {
  id        Int              @id @default(autoincrement())
  name      String
  code      String           @unique
  students  Student[]
  teachers  BranchTeacher[]
}

model BranchTeacher {
  teacher             Teacher          @relation(fields: [teacherInitial], references: [initial])
  teacherInitial      String
  branch              Branch           @relation(fields: [branchCode], references: [code])
  branchCode          String
  @@unique([teacherInitial, branchCode])
}

model CourseOfTeacher {
  teacher             Teacher     @relation(fields: [teacherInitial], references: [initial])
  teacherInitial      String
  course              Course      @relation(fields: [courseId], references: [courseId])
  courseId            String
  @@unique([teacherInitial, courseId])
}

model StudentTeacher {
  student           Student    @relation(fields: [usn], references: [usn])
  usn               String
  teacher           Teacher    @relation(fields: [teacherInitial], references: [initial])
  teacherInitial    String
  @@unique([usn, teacherInitial])
}

model Quiz {
  id           Int       @id @default(autoincrement())
  title        String    
  description  String? 
  duration     Int    
  startTime     DateTime  
  endTime       DateTime?
  totalQuestions Int     
  createdAt    DateTime  @default(now())
  questions    Question[] 
  randomize    Boolean   @default(false) 
}

model Question {
  id          Int      @id @default(autoincrement())
  text        String   
  type        QuestionType 
  score       Int      
  quizId      Int      
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  options     Option[] 
  correctAnswer Option[] 
}

model QuizTeacher {
  id         Int      @id @default(autoincrement())   
  quizId     Int     
  teacher             Teacher          @relation(fields: [teacherInitial], references: [initial])
  teacherInitial      String
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  @@unique([teacherInitial, quizId]) 
}

model QuizStudent {
  id         Int      @id @default(autoincrement())
  studentId  Int      
  quizId     Int     
  student    Student  @relation(fields: [studentUsn], references: [usn])
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  score      Int?    
  attempts   Int?     
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([studentUsn, quizId]) 
}


enum Role {
  ADMIN
  STUDENT
  TEACHER
}
